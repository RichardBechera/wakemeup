@page "/Awaking"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime _jsRuntime;

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<div>
    <select @bind="soundToPlay">
        @foreach (var sound in sounds)
        {
            <option value="@sound">@sound</option>
        }
    </select>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button id="soundButton" @onclick="PlaySound">Click me!</button>
<button id="stopButton" @onclick="PauseSound">Stop sound!</button>
<button  @onclick="PlaySend">Send play</button>
<button  @onclick="PauseSend">Stop send!</button>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
<audio id="sound" src="/audio/@(soundToPlay).mp3"/>
@code {
    private HubConnection hubConnection;
    private List<string> messages = new();
    private string userInput;
    private string messageInput;
    private string soundToPlay { get; set; }
    private List<string> sounds = new() {"Alarm", "Escape"};

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/awaking"), (opts) =>
            {
                opts.HttpMessageHandlerFactory = (message) =>
                {
                    if (message is HttpClientHandler clientHandler)
    // always verify the SSL certificate
                        clientHandler.ServerCertificateCustomValidationCallback +=
                            (sender, certificate, chain, sslPolicyErrors) => { return true; };
                    return message;
                };
            })
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);   
            StateHasChanged();
        });
        hubConnection.On("PauseSound", PauseSound);
        hubConnection.On<string>("PlaySound", (sound) =>
        {
            soundToPlay = sound;
            StateHasChanged();
            return PlaySound();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);
    
    async Task PlaySend() =>
        await hubConnection.SendAsync("SendPlaySound", soundToPlay);
    
    async Task PauseSend() =>
        await hubConnection.SendAsync("SendPauseSound");

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    public async Task PlaySound()
    {
        await _jsRuntime.InvokeAsync<string>("PlayAudio", "sound");
    }
    
    public async Task PauseSound()
    {
        await _jsRuntime.InvokeAsync<string>("PauseAudio", "sound");
    }
}